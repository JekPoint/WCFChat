//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFChatClient.Chat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Chat.IChatService", CallbackContract=typeof(WCFChatClient.Chat.IChatServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Connect", ReplyAction="http://tempuri.org/IChatService/ConnectResponse")]
        bool Connect(WCFChatBase.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Connect", ReplyAction="http://tempuri.org/IChatService/ConnectResponse")]
        System.Threading.Tasks.Task<bool> ConnectAsync(WCFChatBase.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Say")]
        void Say(WCFChatBase.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Say")]
        System.Threading.Tasks.Task SayAsync(WCFChatBase.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Whisper")]
        void Whisper(WCFChatBase.Message msg, WCFChatBase.Client receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Whisper")]
        System.Threading.Tasks.Task WhisperAsync(WCFChatBase.Message msg, WCFChatBase.Client receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/IsWriting")]
        void IsWriting(WCFChatBase.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/IsWriting")]
        System.Threading.Tasks.Task IsWritingAsync(WCFChatBase.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendFile", ReplyAction="http://tempuri.org/IChatService/SendFileResponse")]
        bool SendFile(WCFChatBase.FileMessage fileMsg, WCFChatBase.Client receiver);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendFile", ReplyAction="http://tempuri.org/IChatService/SendFileResponse")]
        System.Threading.Tasks.Task<bool> SendFileAsync(WCFChatBase.FileMessage fileMsg, WCFChatBase.Client receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IChatService/Disconnect")]
        void Disconnect(WCFChatBase.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, Action="http://tempuri.org/IChatService/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync(WCFChatBase.Client client);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendStatusMessageEx", ReplyAction="http://tempuri.org/IChatService/SendStatusMessageExResponse")]
        void SendStatusMessageEx(string msg, System.DateTime datetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendStatusMessageEx", ReplyAction="http://tempuri.org/IChatService/SendStatusMessageExResponse")]
        System.Threading.Tasks.Task SendStatusMessageExAsync(string msg, System.DateTime datetime);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/RefreshClients")]
        void RefreshClients(WCFChatBase.Client[] clients);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/Receive")]
        void Receive(WCFChatBase.Message msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ReceiveWhisper")]
        void ReceiveWhisper(WCFChatBase.Message msg, WCFChatBase.Client receiver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/IsWritingCallback")]
        void IsWritingCallback(WCFChatBase.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ReceiverFile")]
        void ReceiverFile(WCFChatBase.FileMessage fileMsg, WCFChatBase.Client reciver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/UserJoin")]
        void UserJoin(WCFChatBase.Client client);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/UserLeave")]
        void UserLeave(WCFChatBase.Client client);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : WCFChatClient.Chat.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<WCFChatClient.Chat.IChatService>, WCFChatClient.Chat.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Connect(WCFChatBase.Client client) {
            return base.Channel.Connect(client);
        }
        
        public System.Threading.Tasks.Task<bool> ConnectAsync(WCFChatBase.Client client) {
            return base.Channel.ConnectAsync(client);
        }
        
        public void Say(WCFChatBase.Message msg) {
            base.Channel.Say(msg);
        }
        
        public System.Threading.Tasks.Task SayAsync(WCFChatBase.Message msg) {
            return base.Channel.SayAsync(msg);
        }
        
        public void Whisper(WCFChatBase.Message msg, WCFChatBase.Client receiver) {
            base.Channel.Whisper(msg, receiver);
        }
        
        public System.Threading.Tasks.Task WhisperAsync(WCFChatBase.Message msg, WCFChatBase.Client receiver) {
            return base.Channel.WhisperAsync(msg, receiver);
        }
        
        public void IsWriting(WCFChatBase.Client client) {
            base.Channel.IsWriting(client);
        }
        
        public System.Threading.Tasks.Task IsWritingAsync(WCFChatBase.Client client) {
            return base.Channel.IsWritingAsync(client);
        }
        
        public bool SendFile(WCFChatBase.FileMessage fileMsg, WCFChatBase.Client receiver) {
            return base.Channel.SendFile(fileMsg, receiver);
        }
        
        public System.Threading.Tasks.Task<bool> SendFileAsync(WCFChatBase.FileMessage fileMsg, WCFChatBase.Client receiver) {
            return base.Channel.SendFileAsync(fileMsg, receiver);
        }
        
        public void Disconnect(WCFChatBase.Client client) {
            base.Channel.Disconnect(client);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(WCFChatBase.Client client) {
            return base.Channel.DisconnectAsync(client);
        }
        
        public void SendStatusMessageEx(string msg, System.DateTime datetime) {
            base.Channel.SendStatusMessageEx(msg, datetime);
        }
        
        public System.Threading.Tasks.Task SendStatusMessageExAsync(string msg, System.DateTime datetime) {
            return base.Channel.SendStatusMessageExAsync(msg, datetime);
        }
    }
}
